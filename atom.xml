<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rhine(黎磊)</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-03T09:11:53.759Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>rhine(黎磊)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>View 的事件分发拦截机制</title>
    <link href="http://yoursite.com/2018/11/15/View%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/11/15/View的事件分发拦截机制/</id>
    <published>2018-11-15T04:01:45.000Z</published>
    <updated>2019-10-03T09:11:53.759Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这一个知识点也是写烂了的，可是作为 Android 开发者又不得不学习这部分，学习了呢，总觉得要写点东西出来才觉得有感觉，得，就有这一篇文章了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;API 27&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;流程介绍&quot;&gt;&lt;a href=&quot;#流程介绍&quot; class=&quot;headerlink&quot; title=&quot;流程介绍&quot;&gt;&lt;/a&gt;流程介绍&lt;/h2&gt;&lt;p&gt;在单点触摸中，我们对屏幕的点击，滑动，抬起等一系的动作都是由一个一个MotionEvent对象组成的触摸事件。MotionEvent 是对一个对一个事件的封装，里面包括动作、坐标等等信息，根据不同动作，主要有以下三种事件类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ACTION_DOWN：手指刚接触屏幕，按下去的那一瞬间产生该事件&lt;/li&gt;
&lt;li&gt;ACTION_MOVE：手指在屏幕上移动时候产生该事件&lt;/li&gt;
&lt;li&gt;ACTION_UP：手指从屏幕上松开的瞬间产生该事件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;要要注意触摸事件不是独立的，而是成组的，每一组事件都是由按下事件开始的，由抬起事件或者取消事件结束。我们把&lt;strong&gt;由 ACTION_DOWN 开始（按下），ACTION_UP （抬起）或者 ACTION_CANCEL（取消） 结束&lt;/strong&gt;的一组事件称为&lt;strong&gt;事件序列&lt;/strong&gt;或者说&lt;strong&gt;事件流&lt;/strong&gt;。取消事件是一种特殊的事件，它对应的是事件序列非人为的提前结束。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android系列" scheme="http://yoursite.com/categories/Android%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Framework" scheme="http://yoursite.com/tags/Framework/"/>
    
  </entry>
  
  <entry>
    <title>Android的消息机制-Handler</title>
    <link href="http://yoursite.com/2018/07/26/Android%E7%9A%84%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6-Handler/"/>
    <id>http://yoursite.com/2018/07/26/Android的消息机制-Handler/</id>
    <published>2018-07-25T17:41:19.000Z</published>
    <updated>2019-10-03T09:15:35.836Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;为了更好的理解 Looper 的工作原理，我们需要对 ThreadLocal 进行了解，如果对 ThreadLocal 没有了解的童鞋，可以参看  &lt;a href=&quot;https://www.jianshu.com/p/0ba78fe61c40&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ThreadLocal 原理&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;  一句话原理：&lt;strong&gt;共享内存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  Handler 作为日常开发的必备，不可避免就要涉及这方面的知识。从开发者角度来说，&lt;strong&gt;Handler 是 Android 消息机制的上层接口&lt;/strong&gt;，使得开发的时只需与 Handler 交互即可。Handler 使用也很简单，&lt;strong&gt;能够轻松将一个任务切换到 Handler 所在的线程中执行&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;很多人认为Handler的作用就是更新UI，的确没错，但是更新UI仅仅是Handler的一个特殊的使用场景。具体来说，就是有时候需要在子线程做一些耗时操作，比如说访问网络或者耗时的I/O操作，当这些耗时操作完成时，程序的UI进行相应的改变。由于安卓开发规范的限制，我们不能在子线程中访问UI控件，因为UI的控件是线程非安全的，这个时候通过Handler就可以将更新UI的操作切换到主线程中执行。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android系列" scheme="http://yoursite.com/categories/Android%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Framework" scheme="http://yoursite.com/tags/Framework/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLocal 原理</title>
    <link href="http://yoursite.com/2018/07/24/ThreadLocal%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/07/24/ThreadLocal原理/</id>
    <published>2018-07-23T17:43:42.000Z</published>
    <updated>2019-10-03T09:10:44.500Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;总述&quot;&gt;&lt;a href=&quot;#总述&quot; class=&quot;headerlink&quot; title=&quot;总述&quot;&gt;&lt;/a&gt;总述&lt;/h1&gt;&lt;p&gt;ThreadLocal 在面试中经常提到，关于ThreadLocal使用不当造成OOM以及在特殊场景下，通过ThreadLocal可以轻松实现一些看起来复杂的功能，都说明值得花时间研究其原理。&lt;/p&gt;
&lt;p&gt;ThreadLocal 不是 Thread，是一个&lt;strong&gt;线程内部的数据存储类&lt;/strong&gt;，通过它可以在指定的线程中存储数据，&lt;strong&gt;对数据存储后，只有在线程中才可以获取到存储的数据，对于其他线程来说是无法获取到数据。&lt;/strong&gt;可能这才是Local的真正含义吧。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android系列" scheme="http://yoursite.com/categories/Android%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="ThreadLocal" scheme="http://yoursite.com/tags/ThreadLocal/"/>
    
  </entry>
  
</feed>
